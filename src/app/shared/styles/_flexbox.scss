$flex-directions: row column;
@each $direction in $flex-directions{
  .flex-#{$direction} {
    flex-direction: #{$direction};
  }
  @each $breakpoint-tag, $breakpoint-screen in $breakpoints{
    @media (min-width: $breakpoint-screen) {
      .flex-#{$breakpoint-tag}-#{$direction} {
        flex-direction: #{$direction};
      }
    }
  }
}

$alignments: center flex-start flex-end;
@each $alignment in $alignments {
  .align-items-#{$alignment} {
    align-items: #{$alignment};
  }
  .align-content-#{$alignment} {
    align-content: #{$alignment};
  }
  .align-self-#{$alignment} {
    align-self: #{$alignment};
  }
  @each $breakpoint-tag, $breakpoint-screen in $breakpoints{
    @media (min-width: $breakpoint-screen) {
      .align-items-#{$breakpoint-tag}-#{$alignment} {
        align-items: #{$alignment};
      }
      .align-content-#{$breakpoint-tag}-#{$alignment} {
        align-content: #{$alignment};
      }
      .align-self-#{$breakpoint-tag}-#{$alignment} {
        align-self: #{$alignment};
      }
    }
  }
}

$justifies: center flex-start flex-end space-between;
@each $justify in $justifies {
  .justify-items-#{$justify} {
    justify-items: #{$justify};
  }
  .justify-content-#{$justify} {
    justify-content: #{$justify};
  }
  .justify-self-#{$justify} {
    justify-self: #{$justify};
  }
  @each $breakpoint-tag, $breakpoint-screen in $breakpoints{
    @media (min-width: $breakpoint-screen) {
      .justify-items-#{$breakpoint-tag}-#{$justify} {
        justify-items: #{$justify};
      }
      .justify-content-#{$breakpoint-tag}-#{$justify} {
        justify-content: #{$justify};
      }
      .justify-self-#{$breakpoint-tag}-#{$justify} {
        justify-self: #{$justify};
      }
    }
  }
}

.gap-80 {
  gap: 7rem;
}

@for $i from 0 through 12 {
  $value: $i;
  $gap-value: $value * calc(1 / 4);
  .gap-#{$value} {
    gap: #{$gap-value}rem;
  }
  @each $breakpoint-tag, $breakpoint-screen in $breakpoints{
    @media (min-width: $breakpoint-screen) {
      .gap-#{$breakpoint-tag}#{$value} {
        gap: #{$gap-value}rem;
      }
    }
  }
}

@for $i from 0 through 1 {
  $value: $i;
  .flex-grow-#{$value} {
    flex-grow: $value;
  }
  .flex-shrink-#{$value} {
    flex-shrink: $value;
  }
  .flex-#{$value} {
    flex: $value $value;
  }
  @each $breakpoint-tag, $breakpoint-screen in $breakpoints{
    @media (min-width: $breakpoint-screen) {
      .flex-grow-#{$breakpoint-tag}-#{$value} {
        flex-grow: $value;
      }
      .flex-shrink-#{$breakpoint-tag}-#{$value} {
        flex-shrink: $value;
      }
      .flex-#{$breakpoint-tag}-#{$value} {
        flex: $value $value;
      }
    }
  }
}

$wrappings: wrap nowrap;
@each $wrap in $wrappings {
  .flex-#{$wrap} {
    flex-wrap: $wrap;
  }
  @each $breakpoint-tag, $breakpoint-screen in $breakpoints{
    @media (min-width: $breakpoint-screen) {
      .flex-#{$breakpoint-tag}-#{$wrap} {
        flex-wrap: $wrap;
      }
    }
  }
}
